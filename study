require 'thor'
#require 'fileutils'
require 'csv'

class CLI < Thor

  desc 'start', 'study start'
  def start
    unless File.exists? time_file

      time = Time.now
      puts "[#{time.strftime("%R")}]学習を開始しました"
      File.open(time_file, 'w') do |txt|
        txt.puts time.strftime('%Y,%m,%d,%H,%M,%S')
      end
    else
      puts 'すでに学習を始めています'
    end
  end

  desc 'finish', 'study finish'
  def finish
    if File.exists? time_file

      finished_time = Time.now
      puts "[#{finished_time.strftime("%R")}]学習を終了しました"
      started_time = File.open(time_file).read
      File.delete(time_file)

      started_time = to_time_object(started_time)

      study_minutes = (finished_time - started_time).to_i / 60

      puts '今回の学習時間は#{study_minutes}分です'

      puts '学習内容を記入してください'
      study_content = STDIN.gets.chomp

      CSV.open(history_file, 'a') do |csv|
        csv << [started_time.strftime('%Y-%m-%d %H:%M'),
                finished_time.strftime('%Y-%m-%d %H:%M'),
                study_minutes, study_content]
      end
    else
      puts '学習を開始していません'
    end
  end

  desc 'total', 'output total time'
  def total
    t = 0
    CSV.read(history_file).each{|row| t += row[2].to_i}
    puts "現在までの合計の学習時間は#{t/60}時間#{t%60}分です"
  end

  # def stop
  # end

  # def restart
  # end
  private

  def to_time_object(time)
    a = time.split(',').map(&:to_i)
    Time.new(a[0],a[1],a[2],a[3],a[4],a[5])
  end

  def time_file
    @time_file ||= File.expand_path('time.txt', __dir__)
  end

  def history_file
    @history_file ||= File.expand_path('history.csv', __dir__)
  end
end

CLI.start(ARGV)
